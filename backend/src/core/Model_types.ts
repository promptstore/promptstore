import { ChatCompletionResponse, CompletionResponse, Function } from './common_types';
import { Callback } from './Callback';
import { Message } from './PromptTemplate_types';

export interface ModelOnStartResponse {
  messages: Message[];
  modelKey: string;
  modelParams: ModelParams;
}

export interface ModelOnEndParams {
  response?: ChatCompletionResponse;
  errors?: any;
}

export interface CompletionModelOnEndParams {
  response?: CompletionResponse;
  errors?: any;
}

export interface ModelOnEndResponse {
  modelKey: string;
  response?: ChatCompletionResponse;
  errors?: any;
}

export interface CompletionModelOnEndResponse {
  modelKey: string;
  response?: CompletionResponse;
  errors?: any;
}

export type ModelOnStartCallbackFunction = (params: ModelOnStartResponse) => void;

export type ModelOnEndCallbackFunction = (params: ModelOnEndResponse) => void;

export type ModelOnErrorCallbackFunction = (errors: any) => void;

export type CompletionModelOnEndCallbackFunction = (params: CompletionModelOnEndResponse) => void;

export interface ModelParams {
  max_tokens?: number;  // The maximum number of tokens to generate in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length. Defaults to inf.
  n?: number;  // How many chat completion choices to generate for each input message. Defaults to 1.
  temperature?: number;  // What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. Defaults to 1. Alter this or top_p but not both.
  top_p?: number;  // An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. Defaults to 1. Alter this or temperature but not both.
  stop?: string | string[];  // Up to 4 sequences where the API will stop generating further tokens. Defaults to null.
  presence_penalty?: number;  // Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. Defaults to 0.
  frequency_penalty?: number;  // Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. Defaults to 0.
  logit_bias?: object;  // Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. Defaults to null.
  functions?: Function[];  // A list of functions the model may generate JSON inputs for.
}

interface ChatCompletionRequest {
  provider: string;
  messages: Message[];
  model: string;
  modelParams: ModelParams;
};

export type ChatCompletionService = (request: ChatCompletionRequest) => Promise<ChatCompletionResponse>;

interface CompletionRequest {
  provider: string;
  prompt: string | string[];
  model: string;
  modelParams: ModelParams;
}

export type CompletionService = (request: CompletionRequest) => Promise<CompletionResponse>;

export interface LLMChatModelParams {
  modelType: string;
  modelKey: string;
  chatCompletionService: ChatCompletionService;
  callbacks?: Callback[];
}

export interface LLMCompletionModelParams {
  modelType: string;
  modelKey: string;
  completionService: CompletionService;
  callbacks?: Callback[];
}

export interface CustomModelOnStartResponse {
  modelKey: string;
  url: string;
  args: any;
  isBatch: boolean;
}

export interface CustomModelOnEndParams {
  response?: any;
  errors?: any;
}

export interface CustomModelOnEndResponse {
  modelKey: string;
  response?: any;
  errors?: any;
}

export type CustomModelOnStartCallbackFunction = (params: CustomModelOnStartResponse) => void;

export type CustomModelOnEndCallbackFunction = (params: CustomModelOnEndResponse) => void;

export type CustomModelOnErrorCallbackFunction = (errors: any) => void;

export interface CustomModelParams {
  modelType: string;
  modelKey: string;
  url?: string;
  batchEndpoint?: string;
  callbacks?: Callback[];
}

export interface CustomModelCallParams {
  args: any;
  isBatch: boolean;
  callbacks?: Callback[];
}

export interface HuggingfaceModelOnStartResponse {
  modelKey: string;
  args: any;
}

export interface HuggingfaceModelOnEndParams {
  response?: any;
  errors?: any;
}

export interface HuggingfaceModelOnEndResponse {
  modelKey: string;
  response?: any;
  errors?: any;
}

export type HuggingfaceModelOnStartCallbackFunction = (params: HuggingfaceModelOnStartResponse) => void;

export type HuggingfaceModelOnEndCallbackFunction = (params: HuggingfaceModelOnEndResponse) => void;

export type HuggingfaceModelOnErrorCallbackFunction = (errors: any) => void;

export interface HuggingfaceModelParams {
  modelType: string;
  modelKey: string;
  modelProviderService: any;
  callbacks?: Callback[];
}

export interface HuggingfaceModelCallParams {
  args: any;
  callbacks?: Callback[];
}

export interface ModelCallParams {
  messages: Message[];
  modelKey: string;
  modelParams: ModelParams;
  callbacks?: Callback[];
}

export interface Model {
  modelType: string;
  modelKey: string;
  call: (params: any) => Promise<any>;
  callbacks: Callback[];
}
