version: '3.4'

x-defaults:
  &defaults
  networks:
    - promptstore_dev

services:
  postgresql:
    <<: *defaults
    image: postgres:14
    restart: always
    environment:      
      POSTGRES_PASSWORD: changeme
      POSTGRES_USER: psadmin
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/postgres:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/

  redis:
    <<: *defaults
    image: redislabs/redisearch:latest
    ports:
      - "6379:6379"
    volumes:
      - "${DOCKER_VOLUME_DIRECTORY:-.}/volumes/redis:/data:delegated"

  minio:
    <<: *defaults
    image: minio/minio:RELEASE.2020-12-03T00-03-10Z
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=changeme
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3

  elasticsearch:
    <<: *defaults
    container_name: elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    expose:
      - 9200
    volumes:
      - /var/lib/elasticsearch/data

  temporal:
    <<: *defaults
    container_name: temporal
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=psadmin
      - POSTGRES_PWD=changeme
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig

  temporal-admin-tools:
    <<: *defaults
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    stdin_open: true
    tty: true

  temporal-ui:
    <<: *defaults
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    ports:
      - 8080:8080

  app:
    <<: *defaults
    build: .
    ports:
      - 5001:5000
    env_file:
      - ./backend/.env
    environment:
      ENV: prod
      PGHOST: postgresql
      PORT: 5000
    depends_on:
      - postgresql
      - redis
      - minio
      - temporal

  worker:
    <<: *defaults
    build: .
    command: ["./wait-for-it.sh", "localhost:7233", "--timeout=60", "--", "node", "--loader", "ts-node/esm", "workflow/worker.js"]
    env_file:
      - ./backend/.env
    environment:
      ENV: prod
      PGHOST: postgresql
      PORT: 5000
      NODE_OPTIONS: "--experimental-modules --es-module-specifier-resolution=node"
    depends_on:
      - postgresql
      - redis
      - minio
      - temporal

  vecsearch:
    <<: *defaults
    container_name: vecsearch
    depends_on:
      - redis
      - minio
    env_file:
      - .vecsearch.env
    image: markmo/vecsearch:${VECSEARCH_VERSION}
    ports:
      - 5002:5000

networks:
  promptstore_dev:
    driver: host
    name: promptstore_dev
